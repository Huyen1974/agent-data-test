name: Cloud Run Deploy (Manual)
on:
  workflow_dispatch:
    inputs:
      service:
        description: Cloud Run service name
        default: agent-data-test
        required: true
      image_tag:
        description: Image tag (e.g. SHA)
        required: true
      allow_unauthenticated:
        description: Allow unauthenticated access
        default: "false"
        required: false
      health_timeout:
        description: Optional request timeout seconds (Cloud Run --timeout)
        required: false
      dry_run:
        description: If true, only validate inputs and image URI (no deploy)
        default: "true"
        required: false
permissions:
  contents: read
  id-token: write
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  AR_REPO: agent-data
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Compute image & flags (always runs)
        id: prep
        run: |
          set -euo pipefail
          SERVICE="${{ github.event.inputs.service }}"
          TAG="${{ github.event.inputs.image_tag }}"
          AUTH="${{ github.event.inputs.allow_unauthenticated }}"
          HT="${{ github.event.inputs.health_timeout }}"
          DRY="${{ github.event.inputs.dry_run }}"
          if [[ -z "${SERVICE}" || -z "${TAG}" ]]; then
            echo "service/tag missing"; exit 1
          fi
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${SERVICE}:${TAG}"
          if [[ "${AUTH}" == "true" ]]; then AUTH_FLAG="--allow-unauthenticated"; else AUTH_FLAG="--no-allow-unauthenticated"; fi
          HT_FLAG=""
          if [[ -n "${HT}" ]]; then HT_FLAG="--timeout=${HT}"; fi
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"
          echo "AUTH_FLAG=${AUTH_FLAG}" >> "$GITHUB_ENV"
          echo "HT_FLAG=${HT_FLAG}" >> "$GITHUB_ENV"
          echo "SERVICE=${SERVICE}" >> "$GITHUB_ENV"
          echo "DRY_RUN=${DRY}" >> "$GITHUB_ENV"
          echo "Computed IMAGE=${IMAGE}" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Validate only (dry-run true)
        if: ${{ env.DRY_RUN == 'true' }}
        run: |
          set -euo pipefail
          [[ -n "${IMAGE}" ]] || { echo "Empty IMAGE"; exit 1; }
          echo "Dry-run validation passed."

      - name: Deploy to Cloud Run (when dry_run=false) â€” NO PORT
        if: ${{ env.DRY_RUN != 'true' }}
        run: |
          set -euo pipefail
          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE}" \
            --region "${{ env.REGION }}" \
            --project "${{ env.PROJECT_ID }}" \
            --platform managed \
            ${AUTH_FLAG} ${HT_FLAG} \
            --quiet

      - name: Show service state (post-deploy)
        if: ${{ env.DRY_RUN != 'true' }}
        run: |
          gcloud run services describe "${SERVICE}" \
            --region "${{ env.REGION }}" --platform managed \
            --format="value(status.conditions[?type='Ready'].status,status.latestReadyRevisionName)"