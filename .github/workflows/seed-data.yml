name: Seed Firestore Data

# Runs automatically after frontend deployment or can be triggered manually
# Implements Constitution HP-06 (Service-oriented architecture)
# and QD-LAW §2 (Environment separation via collections)

on:
  workflow_run:
    workflows: ["Deploy Frontend to Firebase Hosting"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_reseed:
        description: 'Force complete reseed (deletes existing data)'
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  seed-data:
    # Only run if frontend deployment succeeded, or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: api-service/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api-service/requirements.txt

      - name: Verify Firestore connectivity
        run: |
          python3 - <<'PYEOF'
          from google.cloud import firestore
          import sys
          try:
            db = firestore.Client()
            # Simple connectivity check by fetching the first collection (if any)
            first_collection = next(db.collections(), None)
            if first_collection:
              print(f"✓ Firestore connectivity verified (found collection: {first_collection.id})")
            else:
              print("✓ Firestore connectivity verified (no collections found yet)")
            sys.exit(0)
          except Exception as e:
            print(f"ERROR: Failed to connect to Firestore: {e}", file=sys.stderr)
            sys.exit(1)
          PYEOF

      - name: Seed sample data
        run: |
          cd api-service
          python3 create_sample_data.py

      - name: Verify data seeding
        run: |
          python3 - <<'PYEOF'
          from google.cloud import firestore
          import sys

          db = firestore.Client()

          # Check both collections as per QD-LAW §2
          collections_to_check = ["test_documents", "production_documents"]

          all_good = True
          for collection_name in collections_to_check:
              docs = list(db.collection(collection_name).limit(1).stream())
              if docs:
                  print(f"✓ {collection_name}: data verified")
              else:
                  print(f"✗ {collection_name}: NO DATA FOUND", file=sys.stderr)
                  all_good = False

          if all_good:
              print("\n✓ All collections verified successfully")
              sys.exit(0)
          else:
              print("\nERROR: Data verification failed", file=sys.stderr)
              sys.exit(1)
          PYEOF

      - name: Report success
        if: success()
        run: |
          echo "=========================================="
          echo "✓ Data seeding completed successfully"
          echo "=========================================="
          echo ""
          echo "Collections populated:"
          echo "  - test_documents"
          echo "  - production_documents"
          echo ""
          echo "Frontend should now display knowledge tree data."
