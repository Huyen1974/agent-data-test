name: Deploy Frontend to Firebase Hosting

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Export Firebase credentials JSON
        id: firebase-creds
        run: |
          python - <<'PY' >> "$GITHUB_OUTPUT"
          import os
          path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
          with open(path, "r", encoding="utf-8") as fh:
              data = fh.read()
          print("json={}".format(data.replace("\n", "\\n")))
          PY

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app-service-project/package-lock.json

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest

      - name: Fetch Firebase Secrets from Google Secret Manager
        id: fetch-secrets
        run: |
          set -euo pipefail

          echo "Fetching Firebase configuration from Google Secret Manager..."

          # Fetch all Firebase secrets and export them as environment variables
          export VITE_FIREBASE_API_KEY=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_API_KEY" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_AUTH_DOMAIN=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_AUTH_DOMAIN" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_PROJECT_ID=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_PROJECT_ID" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_STORAGE_BUCKET=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_STORAGE_BUCKET" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_MESSAGING_SENDER_ID=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_MESSAGING_SENDER_ID" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_APP_ID=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_APP_ID" --project="github-chatgpt-ggcloud" --quiet)

          # Verify all secrets were fetched successfully
          if [ -z "$VITE_FIREBASE_API_KEY" ] || [ -z "$VITE_FIREBASE_AUTH_DOMAIN" ] || [ -z "$VITE_FIREBASE_PROJECT_ID" ]; then
            echo "ERROR: Failed to fetch one or more Firebase secrets" >&2
            exit 1
          fi

          # Export secrets as workflow outputs for use in subsequent steps
          echo "VITE_FIREBASE_API_KEY=$VITE_FIREBASE_API_KEY" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_AUTH_DOMAIN=$VITE_FIREBASE_AUTH_DOMAIN" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_PROJECT_ID=$VITE_FIREBASE_PROJECT_ID" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_STORAGE_BUCKET=$VITE_FIREBASE_STORAGE_BUCKET" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=$VITE_FIREBASE_MESSAGING_SENDER_ID" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_APP_ID=$VITE_FIREBASE_APP_ID" >> "$GITHUB_OUTPUT"

          echo "✅ Successfully fetched all Firebase secrets from Secret Manager"

      - name: Install dependencies
        run: npm ci --prefix app-service-project

      - name: Create .env.production
        run: |
          set -euo pipefail

          echo "Creating .env.production with Firebase secrets..."
          cat <<EOF > app-service-project/.env.production
          VITE_FIREBASE_API_KEY=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_APP_ID }}
          EOF

          # Verify .env.production was created successfully
          if [ ! -f app-service-project/.env.production ]; then
            echo "ERROR: .env.production file was not created" >&2
            exit 1
          fi

          # Verify all 6 variables are present in the file
          echo "Verifying .env.production contains all required variables..."
          REQUIRED_VARS=("VITE_FIREBASE_API_KEY" "VITE_FIREBASE_AUTH_DOMAIN" "VITE_FIREBASE_PROJECT_ID" "VITE_FIREBASE_STORAGE_BUCKET" "VITE_FIREBASE_MESSAGING_SENDER_ID" "VITE_FIREBASE_APP_ID")
          MISSING_IN_FILE=()

          for var in "${REQUIRED_VARS[@]}"; do
            if ! grep -q "^${var}=" app-service-project/.env.production; then
              MISSING_IN_FILE+=("$var")
            fi
          done

          if [ ${#MISSING_IN_FILE[@]} -gt 0 ]; then
            echo "ERROR: The following variables are missing from .env.production:" >&2
            for var in "${MISSING_IN_FILE[@]}"; do
              echo "  - $var" >&2
            done
            exit 1
          fi

          echo "✓ .env.production created and verified successfully"

      - name: Build frontend
        run: |
          # Verify all 6 required Firebase secrets are set (without logging secret values)
          MISSING_SECRETS=()

          if [ -z "${{ steps.fetch-secrets.outputs.VITE_FIREBASE_API_KEY }}" ]; then
            MISSING_SECRETS+=("VITE_FIREBASE_API_KEY")
          fi
          if [ -z "${{ steps.fetch-secrets.outputs.VITE_FIREBASE_AUTH_DOMAIN }}" ]; then
            MISSING_SECRETS+=("VITE_FIREBASE_AUTH_DOMAIN")
          fi
          if [ -z "${{ steps.fetch-secrets.outputs.VITE_FIREBASE_PROJECT_ID }}" ]; then
            MISSING_SECRETS+=("VITE_FIREBASE_PROJECT_ID")
          fi
          if [ -z "${{ steps.fetch-secrets.outputs.VITE_FIREBASE_STORAGE_BUCKET }}" ]; then
            MISSING_SECRETS+=("VITE_FIREBASE_STORAGE_BUCKET")
          fi
          if [ -z "${{ steps.fetch-secrets.outputs.VITE_FIREBASE_MESSAGING_SENDER_ID }}" ]; then
            MISSING_SECRETS+=("VITE_FIREBASE_MESSAGING_SENDER_ID")
          fi
          if [ -z "${{ steps.fetch-secrets.outputs.VITE_FIREBASE_APP_ID }}" ]; then
            MISSING_SECRETS+=("VITE_FIREBASE_APP_ID")
          fi

          if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
            echo "ERROR: The following required Firebase secrets are missing:" >&2
            for secret in "${MISSING_SECRETS[@]}"; do
              echo "  - $secret" >&2
            done
            exit 1
          fi

          echo "✓ All 6 Firebase secrets verified successfully"

          # Run Vite build - Vite will automatically read from .env.production
          npm run build --prefix app-service-project

      - name: Verify Build Artifact
        run: |
          set -euo pipefail

          echo "Verifying Firebase configuration in built artifacts..."

          # Check index.html specifically for window.__FIREBASE_CONFIG__
          if [ -f app-service-project/dist/index.html ]; then
            echo "Checking index.html for Firebase config..."

            # Verify window.__FIREBASE_CONFIG__ exists
            if ! grep -q "window.__FIREBASE_CONFIG__" app-service-project/dist/index.html; then
              echo "ERROR: window.__FIREBASE_CONFIG__ not found in index.html" >&2
              exit 1
            fi

            # Check for empty values in all 6 Firebase config fields
            # Pattern matches: apiKey: '', apiKey: "", apiKey:'', apiKey:""
            EMPTY_PATTERNS=(
              "apiKey:[[:space:]]*['\"]?['\"]"
              "authDomain:[[:space:]]*['\"]?['\"]"
              "projectId:[[:space:]]*['\"]?['\"]"
              "storageBucket:[[:space:]]*['\"]?['\"]"
              "messagingSenderId:[[:space:]]*['\"]?['\"]"
              "appId:[[:space:]]*['\"]?['\"]"
            )

            FOUND_EMPTY=()
            for pattern in "${EMPTY_PATTERNS[@]}"; do
              if grep -qE "$pattern" app-service-project/dist/index.html; then
                field_name=$(echo "$pattern" | cut -d: -f1)
                FOUND_EMPTY+=("$field_name")
              fi
            done

            if [ ${#FOUND_EMPTY[@]} -gt 0 ]; then
              echo "ERROR: Found empty Firebase configuration fields in index.html:" >&2
              for field in "${FOUND_EMPTY[@]}"; do
                echo "  - $field" >&2
              done
              echo "" >&2
              echo "Showing relevant section of index.html:" >&2
              grep -A 10 "window.__FIREBASE_CONFIG__" app-service-project/dist/index.html | head -15 >&2
              exit 1
            fi

            echo "✓ Firebase configuration in index.html verified successfully"
          else
            echo "ERROR: dist/index.html not found" >&2
            exit 1
          fi

          # Additional check: verify no empty apiKey in any JS files
          if grep -R --include '*.js' -E "apiKey:[[:space:]]*['\"]?['\"]" app-service-project/dist 2>/dev/null; then
            echo "WARNING: Found potential empty apiKey in JavaScript files" >&2
            echo "This may be acceptable if it's in test/mock code, but verify manually" >&2
          fi

          echo "✓ Build artifact verification completed successfully"

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ steps.firebase-creds.outputs.json }}
          projectId: github-chatgpt-ggcloud
          channelId: live
          entryPoint: app-service-project
