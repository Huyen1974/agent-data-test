name: Deploy Frontend to Firebase Hosting

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Export Firebase credentials JSON
        id: firebase-creds
        run: |
          python - <<'PY' >> "$GITHUB_OUTPUT"
          import os
          path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
          with open(path, "r", encoding="utf-8") as fh:
              data = fh.read()
          print("json={}".format(data.replace("\n", "\\n")))
          PY

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app-service-project/package-lock.json

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest

      - name: Fetch Firebase Secrets from Google Secret Manager
        id: fetch-secrets
        run: |
          set -euo pipefail

          echo "Fetching Firebase configuration from Google Secret Manager..."

          # Fetch all Firebase secrets and export them as environment variables
          export VITE_FIREBASE_API_KEY=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_API_KEY" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_AUTH_DOMAIN=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_AUTH_DOMAIN" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_PROJECT_ID=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_PROJECT_ID" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_STORAGE_BUCKET=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_STORAGE_BUCKET" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_MESSAGING_SENDER_ID=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_MESSAGING_SENDER_ID" --project="github-chatgpt-ggcloud" --quiet)
          export VITE_FIREBASE_APP_ID=$(gcloud secrets versions access latest --secret="VITE_FIREBASE_APP_ID" --project="github-chatgpt-ggcloud" --quiet)

          # Verify all secrets were fetched successfully
          if [ -z "$VITE_FIREBASE_API_KEY" ] || [ -z "$VITE_FIREBASE_AUTH_DOMAIN" ] || [ -z "$VITE_FIREBASE_PROJECT_ID" ]; then
            echo "ERROR: Failed to fetch one or more Firebase secrets" >&2
            exit 1
          fi

          # Export secrets as workflow outputs for use in subsequent steps
          echo "VITE_FIREBASE_API_KEY=$VITE_FIREBASE_API_KEY" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_AUTH_DOMAIN=$VITE_FIREBASE_AUTH_DOMAIN" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_PROJECT_ID=$VITE_FIREBASE_PROJECT_ID" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_STORAGE_BUCKET=$VITE_FIREBASE_STORAGE_BUCKET" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=$VITE_FIREBASE_MESSAGING_SENDER_ID" >> "$GITHUB_OUTPUT"
          echo "VITE_FIREBASE_APP_ID=$VITE_FIREBASE_APP_ID" >> "$GITHUB_OUTPUT"

          echo "✅ Successfully fetched all Firebase secrets from Secret Manager"

      - name: Install dependencies
        run: npm ci --prefix app-service-project

      - name: Create .env.production
        run: |
          cat <<EOF > app-service-project/.env.production
          VITE_FIREBASE_API_KEY=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ steps.fetch-secrets.outputs.VITE_FIREBASE_APP_ID }}
          EOF

      - name: Build frontend
        env:
          VITE_FIREBASE_API_KEY: ${{ steps.fetch-secrets.outputs.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ steps.fetch-secrets.outputs.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ steps.fetch-secrets.outputs.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ steps.fetch-secrets.outputs.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ steps.fetch-secrets.outputs.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ steps.fetch-secrets.outputs.VITE_FIREBASE_APP_ID }}
        run: |
          # Verify critical Firebase config is set (without logging secrets)
          if [ -z "$VITE_FIREBASE_API_KEY" ] || [ -z "$VITE_FIREBASE_PROJECT_ID" ]; then
            echo "ERROR: Required Firebase configuration is missing" >&2
            exit 1
          fi
          echo "✓ Firebase configuration verified"

          # Run Vite build with environment variables available
          npm run build --prefix app-service-project

      - name: Inject Firebase Config into Built HTML
        run: |
          set -euo pipefail
          echo "Injecting Firebase config into dist/index.html..."

          # Use sed to replace placeholders in the built index.html
          sed -i "s|%VITE_FIREBASE_API_KEY%|${{ steps.fetch-secrets.outputs.VITE_FIREBASE_API_KEY }}|g" app-service-project/dist/index.html
          sed -i "s|%VITE_FIREBASE_AUTH_DOMAIN%|${{ steps.fetch-secrets.outputs.VITE_FIREBASE_AUTH_DOMAIN }}|g" app-service-project/dist/index.html
          sed -i "s|%VITE_FIREBASE_PROJECT_ID%|${{ steps.fetch-secrets.outputs.VITE_FIREBASE_PROJECT_ID }}|g" app-service-project/dist/index.html
          sed -i "s|%VITE_FIREBASE_STORAGE_BUCKET%|${{ steps.fetch-secrets.outputs.VITE_FIREBASE_STORAGE_BUCKET }}|g" app-service-project/dist/index.html
          sed -i "s|%VITE_FIREBASE_MESSAGING_SENDER_ID%|${{ steps.fetch-secrets.outputs.VITE_FIREBASE_MESSAGING_SENDER_ID }}|g" app-service-project/dist/index.html
          sed -i "s|%VITE_FIREBASE_APP_ID%|${{ steps.fetch-secrets.outputs.VITE_FIREBASE_APP_ID }}|g" app-service-project/dist/index.html

          echo "✓ Firebase config injection completed"

          # Verify injection succeeded (check that placeholders are gone)
          if grep -q '%VITE_FIREBASE_' app-service-project/dist/index.html; then
            echo "ERROR: Found remaining placeholders in index.html" >&2
            grep '%VITE_FIREBASE_' app-service-project/dist/index.html >&2
            exit 1
          fi

          echo "✓ Verified all placeholders replaced"

      - name: Verify Build Artifact
        run: |
          set -euo pipefail
          if grep -R --include '*.html' --include '*.js' 'apiKey: ""' app-service-project/dist; then
            echo 'Detected empty Firebase apiKey in build output' >&2
            exit 1
          fi
          if grep -R --include '*.html' --include '*.js' "apiKey: ''" app-service-project/dist; then
            echo 'Detected empty Firebase apiKey in build output' >&2
            exit 1
          fi

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ steps.firebase-creds.outputs.json }}
          projectId: github-chatgpt-ggcloud
          channelId: live
          entryPoint: app-service-project
