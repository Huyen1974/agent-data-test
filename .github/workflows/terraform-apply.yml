name: Terraform Apply on Main

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-apply.yml'
  workflow_dispatch:

# Prevent concurrent Terraform operations to avoid state conflicts
concurrency:
  group: terraform-apply-main
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=huyen1974-agent-data-tfstate-test" \
            -backend-config="prefix=terraform/state"

      - name: Terraform Validate
        working-directory: terraform
        run: |
          terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          # Run terraform plan and capture both exit code and output
          set +e
          plan_output=$(terraform plan -no-color -detailed-exitcode \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="qdrant_cluster_id=${{ secrets.QDRANT_CLUSTER1_ID }}" \
            -var="qdrant_api_key=${{ secrets.QDRANT_CLUSTER1_KEY }}" \
            -out=tfplan 2>&1)
          exit_code=$?
          set -e

          # Print the output for debugging
          echo "$plan_output"

          # Check for errors (exit code 1)
          if [ "$exit_code" = "1" ]; then
            echo "❌ Terraform plan failed"
            exit 1
          fi

          # Parse plan output to detect changes (more reliable than exit code)
          # Look for "Plan: X to add, Y to change, Z to destroy"
          if echo "$plan_output" | grep -q "Plan:.*to add\|to change\|to destroy"; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✓ Changes detected in plan - will apply"
          elif echo "$plan_output" | grep -q "No changes"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "✓ No changes detected - nothing to apply"
          else
            # If we can't determine from output, use exit code as fallback
            if [ "$exit_code" = "2" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "✓ Changes detected in plan (via exit code) - will apply"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "✓ No changes detected (via exit code) - nothing to apply"
            fi
          fi

      - name: Terraform Apply
        if: steps.plan.outputs.has_changes == 'true'
        working-directory: terraform
        run: |
          echo "Applying Terraform changes..."
          terraform apply -auto-approve tfplan
          echo "✓ Terraform apply completed successfully"

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.plan.outputs.has_changes }}" = "true" ]; then
            echo "✅ Terraform changes applied successfully"
          else
            echo "ℹ️  No Terraform changes to apply"
          fi
