name: Cleanup Artifacts (Manual)
on:
  workflow_dispatch:
    inputs:
      mode:
        description: inventory|plan|execute
        required: true
        default: inventory
      retain_days:
        description: Delete candidates older than N days (plan/execute)
        required: false
        default: "30"
      confirm:
        description: Type DELETE to confirm execution (execute only)
        required: false
permissions:
  contents: write
  actions: read
jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compute candidates
        id: scan
        shell: bash
        run: |
          set -euo pipefail
          MODE="${{ github.event.inputs.mode }}"
          DAYS="${{ github.event.inputs.retain_days }}"
          ROOT="governance/artifacts"
          mkdir -p "$ROOT"
          mapfile -t ALL < <(find "$ROOT" -maxdepth 1 -mindepth 1 -type d -name 'run_*' | sort || true)
          NOW_EPOCH="$(date +%s)"
          CUT_EPOCH="$(( NOW_EPOCH - (${DAYS:-30}*24*3600) ))"
          KEEP=(); DELETE=()
          for d in "${ALL[@]:-}"; do
            MT="$(( $(stat -c %Y "$d" 2>/dev/null || stat -f %m "$d") ))"
            if [ "$MT" -lt "$CUT_EPOCH" ]; then DELETE+=("$d"); else KEEP+=("$d"); fi
          done
          jq -n --arg mode "$MODE" --arg days "${DAYS:-30}" \
            --argjson keep "$(printf '%s\n' "${KEEP[@]:-}" | jq -R . | jq -s .)" \
            --argjson delete "$(printf '%s\n' "${DELETE[@]:-}" | jq -R . | jq -s .)" \
            '{mode:$mode, retain_days:($days|tonumber), keep:$keep, delete:$delete}' > cleanup_candidates.json
          echo "Found keep=${#KEEP[@]} delete=${#DELETE[@]}" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Upload inventory
        if: ${{ github.event.inputs.mode == 'inventory' || github.event.inputs.mode == 'plan' }}
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-candidates
          path: cleanup_candidates.json

      - name: Plan summary
        if: ${{ github.event.inputs.mode == 'plan' }}
        run: echo "Plan-only. Review cleanup_candidates.json in artifacts." | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Execute deletion (requires confirm=DELETE)
        if: ${{ github.event.inputs.mode == 'execute' }}
        shell: bash
        run: |
          set -euo pipefail
          test "${{ github.event.inputs.confirm }}" = "DELETE" || { echo "Confirm not provided"; exit 1; }
          mapfile -t DEL < <(jq -r '.delete[]' cleanup_candidates.json || true)
          if [ "${#DEL[@]}" -eq 0 ]; then echo "Nothing to delete"; exit 0; fi
          git config user.name "github-actions"; git config user.email "github-actions@users.noreply.github.com"
          BR="maintenance/cleanup-$(date -u +%Y%m%dT%H%M%SZ)"
          git checkout -b "$BR"
          for d in "${DEL[@]}"; do git rm -r "$d"; done
          git commit -m "chore(cleanup): remove old artifacts (> ${{ github.event.inputs.retain_days }}d) [M6]"
          git push origin "$BR"
          echo "PUSHED_BRANCH=$BR" >> "$GITHUB_ENV"

      - name: Open PR for cleanup commit
        if: ${{ env.PUSHED_BRANCH != '' }}
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ env.PUSHED_BRANCH }}
          base: main
          title: "M6 â€” cleanup artifacts (> ${{ github.event.inputs.retain_days }}d)"
          commit-message: "chore(cleanup): remove old artifacts (> ${{ github.event.inputs.retain_days }}d) [M6]"
          body: |
            Manual cleanup generated by workflow.
            Please review cleanup_candidates.json artifact.