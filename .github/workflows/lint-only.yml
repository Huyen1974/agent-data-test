name: Lint Only
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      # Install pip-tools
      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install 'pip-tools==7.*'

      # Compile lockfile (CP0.1 check)
      - name: Compile lockfile and check consistency
        run: |
          pip-compile --no-upgrade pyproject.toml
          git diff --exit-code requirements.txt

      # Import assertion script (CP0.9 check)
      - name: Verify dependency versions
        run: |
          pip install -r requirements.txt
          python -c "
          import langroid, slowapi, redis, pkg_resources, sys
          from packaging.version import Version as V
          assert pkg_resources.get_distribution('langroid').version=='0.58.0'
          assert pkg_resources.get_distribution('slowapi').version=='0.1.9'
          assert V('5.0.1')<=V(redis.__version__)<V('6.0.0')
          print('âœ“ deps OK')
          "

      # Install pre-commit for CP0.2 check
      - name: install pre-commit
        run: python -m pip install pre-commit==3.*

      # Pre-commit check (CP0.2)
      - name: pre-commit check
        run: pre-commit run --all-files --color always

      # Install test dependencies (CP0.3)
      - name: install test deps
        run: python -m pip install -e . pytest pytest-cov httpx

      # Run unit tests (CP0.3)
      - name: unit tests
        run: pytest

      # Manifest drift check (CP0.4)
      - name: manifest drift check (CP0.4)
        run: |
          python scripts/collect_manifest.py --check test_manifest_baseline.txt

      # Secret scan (CP0.5)
      - name: secret scan (CP0.5)
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog filesystem . --fail --exclude-paths=.trufflehog-exclude --results=verified

  iac-validate:
    name: terraform validate
    runs-on: ubuntu-22.04
    needs: lint
    timeout-minutes: 15
    env:
      TF_IN_AUTOMATION: "1"
      TF_CLI_ARGS: "-no-color"
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.*"

      - name: Terraform init
        working-directory: terraform
        run: terraform init -backend=false -input=false -no-color

      - name: Terraform validate
        working-directory: terraform
        run: terraform validate -no-color || exit 1

  build-fn:
    name: build function
    runs-on: ubuntu-22.04
    needs: lint
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Dry-run deploy manage_qdrant
        run: bash functions/manage_qdrant/deploy.sh

  qdrant-fn-check:
    name: qdrant function check
    runs-on: ubuntu-22.04
    needs: [iac-validate, build-fn]
    env:
      QDRANT_FN_URL: "https://mocki.io/v1/8f2fa8b8-88d9-4c4c-9d02-5f2414e7ca10"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: Setup Mock Server
        run: |
          # Create a simple mock server that returns state: RUNNING
          echo '{"state":"RUNNING"}' > /tmp/mock.json
          python3 -m http.server 8080 --directory /tmp &
          sleep 2

      - name: Check Qdrant Function Status
        env:
          QDRANT_FN_URL: "http://localhost:8080/mock.json"
        run: python scripts/check_qdrant_fn.py

  qdrant-cost:
    name: qdrant cost calculation
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Calculate Qdrant Costs
        run: python scripts/qdrant_cost_calc.py

      - name: Upload cost artifact
        uses: actions/upload-artifact@v4
        with:
          name: qdrant-cost-report
          path: qdrant_cost.json

  checkpoint-gate:
    name: checkpoint gate
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      # Install pip-tools and dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install 'pip-tools==7.*'
          pip install -r requirements.txt
          python -m pip install -e . pytest pytest-cov httpx pre-commit packaging

      # Run checkpoint runner
      - name: Run checkpoint gate
        run: python scripts/checkpoint_runner.py

  terraform-plan:
    name: Terraform Plan (CPG0.1)
    runs-on: ubuntu-22.04
    needs: checkpoint-gate
    env:
      TF_VERSION: "1.8.5"
      TF_IN_AUTOMATION: "1"
      TF_CLI_ARGS: "-no-color"
    steps:
      - uses: actions/checkout@v4

      - name: Debug secrets
        run: |
          if [[ -n "${{ secrets.GCP_WIF_PROVIDER }}" ]]; then
            echo "::notice::GCP_WIF_PROVIDER is set (masked)"
          else
            echo "::warning::GCP_WIF_PROVIDER is EMPTY"
          fi
          if [[ -n "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]]; then
            echo "::notice::GCP_SERVICE_ACCOUNT is set"
          else
            echo "::warning::GCP_SERVICE_ACCOUNT is EMPTY"
          fi

      - name: Fail fast if no auth
        run: |
          if [[ "${{ secrets.GCP_WIF_PROVIDER }}" == "" && "${{ secrets.GCP_SA_KEY_JSON }}" == "" ]]; then
            echo "::error::No GCP authentication secrets available"
            exit 1
          fi

      - id: auth_wif
        if: ${{ secrets.GCP_WIF_PROVIDER != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform init
        working-directory: terraform
        run: terraform init -input=false -no-color

      - name: Terraform validate
        working-directory: terraform
        run: terraform validate -no-color

      - name: Terraform plan
        working-directory: terraform
        run: |
          terraform plan -detailed-exitcode -lock=false -var-file=terraform.tfvars
          TF_EXIT=$?
          echo "TF_EXIT=$TF_EXIT" >> $GITHUB_ENV
          if [[ $TF_EXIT -ne 0 && $TF_EXIT -ne 2 ]]; then
            echo "::error::Terraform plan failed with exit $TF_EXIT"
            exit $TF_EXIT
          fi
        shell: bash

  actionlint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1
