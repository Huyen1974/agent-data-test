#!/bin/bash

# MERGE-UBLA-PR-v1
# Script to merge PR after UBLA audit via terraform-apply-gated workflow
# Usage: bash scripts/merge_ubla_pr.sh

bash -lc 'set -Eeuo pipefail

ID="CLI-UBLA-2d-MERGE-PR-v1"
REPO="Huyen1974/agent-data-test"
ROOT="$HOME/agent-data-test"
WF_PATH=".github/workflows/terraform-apply-gated.yml"
WF_NAME="terraform-apply-gated.yml"

echo "## $ID :: start"

# -- Step A: xác định branch & PR ------------------------------------------------
BR="$(git -C "$ROOT" rev-parse --abbrev-ref HEAD)"
echo "[$ID:A] BR=$BR"

PR="$(gh pr view -R "$REPO" --json number -q .number 2>/dev/null || true)"
if [ -z "${PR:-}" ]; then
  echo "[$ID:A] NO_PR_FOUND_FOR_BRANCH:$BR"
  exit 10
fi
PR_URL="https://github.com/$REPO/pull/$PR"
echo "[$ID:A] PR=$PR_URL"

# -- Step B: tìm run PLAN (workflow_dispatch) mới nhất; nếu thiếu thì dispatch --
HEAD_SHA="$(git -C "$ROOT" rev-parse HEAD)"
TS0="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
echo "[$ID:B] HEAD_SHA=$HEAD_SHA TS0=$TS0"

find_dispatch_run() {
  gh run list -R "$REPO" --workflow "$WF_NAME" -L 30 \
    --json databaseId,createdAt,event,headBranch,headSha \
    | jq -r --arg br "$BR" --arg sha "$HEAD_SHA" --arg ts "$TS0" '\''
        map(select(.event=="workflow_dispatch" and .headBranch==$br and (.headSha==$sha or .createdAt >= $ts)))
        | sort_by(.createdAt) | (.[-1].databaseId // "")
      '\''
}

RUN_ID="$(find_dispatch_run || true)"
if [ -z "${RUN_ID:-}" ]; then
  echo "[$ID:B] No dispatch run found → dispatch now"
  gh workflow run -R "$REPO" "$WF_PATH" -r "$BR" -f confirm=PLAN
  # chờ run mới xuất hiện
  for i in $(seq 1 24); do
    sleep 5
    RUN_ID="$(find_dispatch_run || true)"
    [ -n "${RUN_ID:-}" ] && break
  done
fi
[ -n "${RUN_ID:-}" ] || { echo "[$ID:B] NO_DISPATCH_RUN_FOUND"; exit 11; }
echo "[$ID:B] RUN_ID=$RUN_ID"

# -- Step C: chờ completed & xác nhận success -----------------------------------
for i in $(seq 1 120); do
  S="$(gh run view -R "$REPO" "$RUN_ID" --json status -q .status 2>/dev/null || echo "")"
  [ "$S" = "completed" ] && break
  sleep 5
done
RUN_SUMMARY="$(gh run view -R "$REPO" "$RUN_ID" --json url,status,conclusion -q ".url + \" \" + .status + \" \" + .conclusion")"
RUN_URL="$(echo "$RUN_SUMMARY" | awk "{print \$1}")"
CONC="$(echo "$RUN_SUMMARY" | awk "{print \$3}")"
echo "[$ID:C] RUN=$RUN_SUMMARY"
if [ "$CONC" != "success" ]; then
  echo "[$ID:C] RUN_FAILED_SHOW_FAILED_STEPS_LOGS"
  gh run view -R "$REPO" "$RUN_ID" --log-failed || true
  exit 12
fi

# -- Step D: tải artifact tfplan & audit UBLA -----------------------------------
OUT="$ROOT/governance/artifacts/run_${RUN_ID}"
PLAN_TXT="$OUT/tfplan.txt"
mkdir -p "$OUT"
if [ ! -s "$PLAN_TXT" ]; then
  gh run download -R "$REPO" "$RUN_ID" -n tfplan-text -D "$OUT"
fi
[ -s "$PLAN_TXT" ] || { echo "[$ID:D] MISSING_PLAN_ARTIFACT:$PLAN_TXT"; exit 13; }

SUM="$(grep -E "Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy" -m1 "$PLAN_TXT" || echo "Plan: (summary not found)")"
FTT="$(grep -Ec "uniform_bucket_level_access\\s*=\\s*false\\s*->\\s*true" "$PLAN_TXT" || true)"
TTF="$(grep -Ec "uniform_bucket_level_access\\s*=\\s*true\\s*->\\s*false" "$PLAN_TXT" || true)"
echo "[$ID:D] PLAN_SUMMARY: $SUM"
echo "[$ID:D] UBLA_FALSE_TO_TRUE=$FTT  UBLA_TRUE_TO_FALSE=$TTF"
if [ "${TTF:-0}" -gt 0 ]; then
  echo "[$ID:D] UBLA_HARDENING_FAIL: found true->false flips"
  exit 14
fi
echo "[$ID:D] UBLA_HARDENING_OK"

# -- Step E: tạo evidence file, commit & push -----------------------------------
TS_NOW="$(date -u +%Y%m%dT%H%M%SZ)"
EVI="$ROOT/governance/MERGE_EVIDENCE_UBLA_${RUN_ID}_${TS_NOW}.md"
{
  echo "# UBLA Merge Evidence"
  echo
  echo "- Run: $RUN_URL"
  echo "- Branch: $BR"
  echo "- HEAD: $HEAD_SHA"
  echo "- $SUM"
  echo "- UBLA flips: false→true=$FTT, true→false=$TTF"
  echo "- Artifact: $PLAN_TXT"
  echo
  echo "_Generated by $ID at $TS_NOW_"
} > "$EVI"

git -C "$ROOT" add "$EVI"
if git -C "$ROOT" diff --cached --quiet; then
  echo "[$ID:E] NO_CHANGE_IN_EVIDENCE"
else
  git -C "$ROOT" commit -m "gov: UBLA merge evidence for run $RUN_ID"
  git -C "$ROOT" push -u origin "$BR" || true
  echo "[$ID:E] EVIDENCE_COMMITTED: $EVI"
fi

# -- Step F: comment lên PR, ready & auto-merge --------------------------------
BODY="$(printf "%s\n" \
"**UBLA audit — PLAN-only (ID: $ID)**" \
"" \
"- Run: $RUN_URL" \
"- $SUM" \
"- UBLA flips: false→true=$FTT, true→false=$TTF" \
"" \
"Conclusion: **UBLA_HARDENING_OK** (no true→false). Apply vẫn **gated**." \
"Artifact: Run Artifacts → \`tfplan-text/tfplan.txt\`" \
)"
echo "[$ID:F] POSTING COMMENT..."
gh pr comment -R "$REPO" "$PR" --body "$BODY"

echo "[$ID:F] READY PR (if draft)..."
gh pr ready -R "$REPO" "$PR" || true

echo "[$ID:F] ENABLE AUTO-MERGE (squash + delete-branch)..."
if ! gh pr merge -R "$REPO" "$PR" --auto --squash --delete-branch \
      --subject "UBLA hardening: top-level UBLA=true (plan-only verified)" \
      --body    "Plan: $SUM — UBLA_HARDENING_OK (no true→false). Apply remains gated."; then
  echo "[$ID:F] NOTE: auto-merge enabling failed (likely branch protection / review required)."
fi

echo "[$ID:F] FINAL PR STATE:"
gh pr view -R "$REPO" "$PR" --json state,isDraft,mergeable,mergeStateStatus,merged \
  -q ".state + \" \" + (if .isDraft then \"draft\" else \"ready\" end) + \" mergeable=\" + (.mergeable|tostring) + \" mstate=\" + .mergeStateStatus + \" merged=\" + (.merged|tostring)"

echo "## $ID :: done"
'
