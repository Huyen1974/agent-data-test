--- AUDIT START ---
Date: Sun Oct 12 00:00:00 UTC 2025

--- ENVIRONMENT CONTEXT ---
Top-level directory:
/Users/nmhuyen/Documents/Manual Deploy/agent-data-langroid

Git status:
## feature/runtime-constitution-integration...origin/feature/runtime-constitution-integration
 M .agents/shared/constitution_runtime.sh
?? .evidence/runtime-constitution-audit.txt

Last commit:
fd822b6 feat(agents): implement runtime constitution integration with Ask-Read-Cite-Act

Current branch:
feature/runtime-constitution-integration
--- END ENVIRONMENT CONTEXT ---

--- MODIFIED FILE CONTENT ---
File: .agents/shared/constitution_runtime.sh
--------------------------------------------------
#!/usr/bin/env bash
# Constitution Runtime Helper
# Provides snapshot building, SHA-256 verification, and preamble display for agent startup

set -euo pipefail

# Normalize CRLF to LF and trim trailing whitespace
const_norm() {
    awk '{ sub(/\r$/,""); gsub(/[[:space:]]+$/, ""); print }'
}

# Compute SHA-256 (cross-platform: macOS uses shasum, Linux uses sha256sum)
const_sha256() {
    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum | awk '{print $1}'
    elif command -v shasum >/dev/null 2>&1; then
        shasum -a 256 | awk '{print $1}'
    else
        echo "ERROR: No SHA-256 tool available" >&2
        return 1
    fi
}

# Extract a section from constitution file
# Usage: const_extract SECTION_ID < constitution_file
# Example: const_extract VII < docs/constitution/CONSTITUTION.md
const_extract() {
    local section_id="$1"

    # Multi-language regex: "## Điều VII" or "## Section VII"
    # Extract from section start until next same-level heading
    awk -v sect="$section_id" '
        BEGIN { in_section=0 }
        /^##[[:space:]]+(Điều|Section)[[:space:]]+/ {
            # Check if this is our target section
            if ($0 ~ sect) {
                in_section=1
                print
                next
            }
            # If we hit another ## heading while in section, stop
            if (in_section && /^##[[:space:]]+/) {
                exit
            }
        }
        in_section { print }
    ' | const_norm
}

# Build constitution snapshot from specified sections
# Usage: const_build_snapshot PATH SECTIONS OUTFILE
# Example: const_build_snapshot docs/constitution/CONSTITUTION.md "VII,IX" /tmp/constitution.snapshot.md
const_build_snapshot() {
    local const_path="$1"
    local sections="$2"
    local outfile="$3"

    if [[ ! -f "$const_path" ]]; then
        echo "ERROR: Constitution file not found: $const_path" >&2
        return 1
    fi

    # Create temp file
    local tmpfile
    tmpfile=$(mktemp)

    # Extract each section (portable bash)
    IFS=',' read -r sections_str <<EOF
$sections
EOF
    IFS=',' set -f; set -- $sections_str; set +f
    SECTION_ARRAY=("$@")
    for section in "${SECTION_ARRAY[@]}"; do
        # Trim whitespace
        section=$(echo "$section" | xargs)
        echo "# Extracting Section: $section" >> "$tmpfile"
        echo "" >> "$tmpfile"
        const_extract "$section" < "$const_path" >> "$tmpfile"
        echo "" >> "$tmpfile"
        echo "---" >> "$tmpfile"
        echo "" >> "$tmpfile"
    done

    # Move to final location
    mv "$tmpfile" "$outfile"

    if [[ ! -s "$outfile" ]]; then
        echo "ERROR: Snapshot is empty: $outfile" >&2
        return 1
    fi
}

# Display constitution banner with Ask-Read-Cite-Act reminder
const_banner() {
    local path="${AGENT_CONSTITUTION_PATH:-unknown}"
    local sections="${AGENT_CONSTITUTION_SECTIONS:-unknown}"
    local snapshot="${AGENT_CONSTITUTION_SNAPSHOT:-unknown}"
    local sha="${AGENT_CONSTITUTION_SHA:-unknown}"

    cat <<'BANNER'
╔══════════════════════════════════════════════════════════════════════════════╗
║                   🏛️  RUNTIME CONSTITUTION POLICY 🏛️                         ║
╚══════════════════════════════════════════════════════════════════════════════╝
BANNER

    echo ""
    echo "📜 Source: $path"
    echo "🎯 Active Sections: $sections"
    echo "📸 Snapshot: $snapshot"
    echo "🔒 SHA-256: $sha"
    echo ""

    cat <<'PROCESS'
┌──────────────────────────────────────────────────────────────────────────────┐
│ ⚠️  MANDATORY PROCESS: Ask → Read → Cite → Act                              │
└──────────────────────────────────────────────────────────────────────────────┘

Before ANY sensitive operation (Qdrant, GCS, Secrets, Terraform):

  1️⃣  ASK:   "What does the constitution say about X?"
  2️⃣  READ:  Open and read the relevant section
  3️⃣  CITE:  Quote 2-3 lines from the constitution
  4️⃣  ACT:   Execute only if aligned with cited rules

❌ NEVER rely on memory or assumptions
✅ ALWAYS cite article & line before acting

PROCESS

    echo ""
}

# Display common operation checklists
const_checklist() {
    cat <<'CHECKLIST'
┌──────────────────────────────────────────────────────────────────────────────┐
│ 📋 COMMON OPERATION CHECKLISTS                                              │
└──────────────────────────────────────────────────────────────────────────────┘

🔹 Qdrant Operations:
   □ Check QD-LAW for cluster naming (agent-data-vector-dev-useast4)
   □ Verify collection naming pattern: <env>_documents
   □ Confirm snapshot backup requirements (daily for prod, weekly for test)

🔹 GCS Bucket Operations:
   □ Check TF-LAW for naming: <standard-prefix>-agent-data-<purpose>-<env>
   □ Verify uniform_bucket_level_access = true (HP-02)
   □ Confirm lifecycle policy matches HP-CI-03

🔹 Secret Management:
   □ Check GH-LAW §5 for secret sync model
   □ Verify rotation policy: 90d (prod), 120d (test) per HP-SEC-02
   □ Confirm Secret Manager as source of truth (HP-05)

For complete rules, read: $AGENT_CONSTITUTION_PATH

CHECKLIST

    echo ""
}

File: .agents/gemini/start.sh
--------------------------------------------------
#!/bin/bash
# Gemini CLI Agent - Startup Script
# Canonical startup matching runbook exactly

set -euo pipefail \
&& cd "$(git rev-parse --show-toplevel)" \
&& source ~/.zshrc || true \
&& ./CLI.POSTBOOT.250.sh || true \
&& export GOOGLE_GENAI_USE_GCA=true \
&& unset GEMINI_SANDBOX GEMINI_CLI_SANDBOX GEMINI_TOOLS_SANDBOX GEMINI_TOOL_SANDBOX GEMINI_EXTENSIONS_SANDBOX \
          GOOGLE_API_KEY AISTUDIO_API_KEY VERTEX_AI_PROJECT GOOGLE_VERTEX_PROJECT GOOGLE_VERTEX_LOCATION GOOGLE_CLOUD_PROJECT \
&& export AGENT_CONSTITUTION_PATH="docs/constitution/CONSTITUTION.md" \
&& export AGENT_CONSTITUTION_SECTIONS="${AGENT_CONSTITUTION_SECTIONS:-VII,IX}" \
&& export AGENT_CONSTITUTION_SNAPSHOT="/tmp/constitution.$(id -u).$.md" \
&& source .agents/shared/constitution_runtime.sh || exit 12 \
&& const_build_snapshot "$AGENT_CONSTITUTION_PATH" "$AGENT_CONSTITUTION_SECTIONS" "$AGENT_CONSTITUTION_SNAPSHOT" \
&& export AGENT_CONSTITUTION_SHA="$(const_sha256 < "$AGENT_CONSTITUTION_SNAPSHOT")" \
&& const_banner \
&& const_checklist \
&& exec gemini -e none --extensions none --approval-mode auto_edit \
   --allowed-tools run_shell_command,read_file,write_file,search_file_content,web_fetch \
   -m gemini-2.5-pro

File: .agents/claude/start.sh
--------------------------------------------------
#!/usr/bin/env bash
set -euo pipefail
cd "$(git rev-parse --show-toplevel)"
source ~/.zshrc || true
./CLI.POSTBOOT.250.sh || true
export CLAUDE_CODE_MODEL="${CLAUDE_CODE_MODEL:-claude-3-5-sonnet-20241022}"
export CLAUDE_CODE_TOOLS="${CLAUDE_CODE_TOOLS:-read_file,write_file,run_shell_command,search_file_content}"

export AGENT_CONSTITUTION_PATH="docs/constitution/CONSTITUTION.md"
export AGENT_CONSTITUTION_SECTIONS="${AGENT_CONSTITUTION_SECTIONS:-VII,IX}"
export AGENT_CONSTITUTION_SNAPSHOT="/tmp/constitution.$(id -u).$.md"

source .agents/shared/constitution_runtime.sh || exit 12

const_build_snapshot "$AGENT_CONSTITUTION_PATH" "$AGENT_CONSTITUTION_SECTIONS" "$AGENT_CONSTITUTION_SNAPSHOT"
export AGENT_CONSTITUTION_SHA="$(const_sha256 < "$AGENT_CONSTITUTION_SNAPSHOT")"

const_banner
const_checklist

exec claude code --model "$CLAUDE_CODE_MODEL" --allowed-tools "$CLAUDE_CODE_TOOLS"

--- END MODIFIED FILE CONTENT ---

--- SMOKE TEST: SNAPSHOT CREATION ---
Sourcing constitution runtime...
Building snapshot...

--- Snapshot Verification ---
Path and size:
-rw-------  1 nmhuyen  staff  83 Oct 13 15:17 /tmp/audit_constitution_snapshot.md

First 5 lines:
# Extracting Section: INTRODUCTION,GEMINI_DEFAULT_PERSONA,INTERACTION_MODEL


---


SHA-256 checksum:
cb7bb35d6019de68dedbd93f82444c0aa8322ae708345ab1313c22fcbbd267ef  /tmp/audit_constitution_snapshot.md

--- END SMOKE TEST ---

--- SMOKE TEST: SNAPSHOT CREATION (DEBUG RUN) ---
Previous attempt failed. Re-running with 'set -x' to trace execution.
Sourcing constitution runtime...
Building snapshot...

--- Snapshot Verification (after debug run) ---
Exit code of const_build_snapshot: 0

Path and size:
-rw-------  1 nmhuyen  staff  83 Oct 13 15:17 /tmp/audit_constitution_snapshot.md

First 5 lines:
# Extracting Section: INTRODUCTION,GEMINI_DEFAULT_PERSONA,INTERACTION_MODEL


---


SHA-256 checksum:
cb7bb35d6019de68dedbd93f82444c0aa8322ae708345ab1313c22fcbbd267ef  /tmp/audit_constitution_snapshot.md

--- END SMOKE TEST (DEBUG RUN) ---

--- SMOKE TEST: SNAPSHOT CREATION (POST-FIX) ---
Running smoke test again after applying the fix.

--- Snapshot Verification (Post-Fix) ---
Exit code of const_build_snapshot: 0
Path and size:
-rw-------  1 nmhuyen  staff  141 Oct 13 15:18 /tmp/audit_constitution_snapshot.md

First 5 lines:
# Extracting Section: INTRODUCTION


---


SHA-256 checksum:
089fe790a0d0722acf1569d23bb671b19daed2a07e934ccc25c7aa4001d3cdff  /tmp/audit_constitution_snapshot.md

--- END SMOKE TEST (POST-FIX) ---

--- SIDE-EFFECT VERIFICATION ---
Running 'make agents-constitution-check'...
🔍 Verifying constitution equivalence...
[0;32m[INFO][0m Starting Constitution Equivalence Verification
[0;32m[INFO][0m Source: docs/constitution/CONSTITUTION.md
[0;32m[INFO][0m Sections: VII:CURSOR_MGMT

VERIFICATION RESULTS:
Agent     | Section       | SHA-256                              | Status
----------|---------------|--------------------------------------|--------
gemini|VII:CURSOR_MGMT|52688078763bb3b67eb103e13b84fa4951436d304548cf250a519cb88e8f8dc0|PASS
claude|VII:CURSOR_MGMT|52688078763bb3b67eb103e13b84fa4951436d304548cf250a519cb88e8f8dc0|PASS
codex|VII:CURSOR_MGMT|52688078763bb3b67eb103e13b84fa4951436d304548cf250a519cb88e8f8dc0|PASS

SUMMARY:
[0;32m[INFO][0m Total checks: 3
[0;32m[OK][0m Passed: 3
[0;32m[OK][0m All constitution content matches source exactly! ✅
Exit code: 0

Checking for changes in runbook files...
Exit code: 0 (0 means no changes)

--- END SIDE-EFFECT VERIFICATION ---

--- RELATED ARTIFACTS VERIFICATION ---
Details of the master constitution file:
-rw-r--r--  1 nmhuyen  staff  63934 Oct 12 17:26 docs/constitution/CONSTITUTION.md

Searching for constitution markers in agent runbooks...

--- END RELATED ARTIFACTS VERIFICATION ---

--- AUDIT END ---

=== SUMMARY & CONCLUSION ===
Branch: feature/runtime-constitution-integration
Snapshot Path: /tmp/constitution.501.68954.md
Snapshot Bytes: N/A
Snapshot SHA-256: N/A
Make Exit Code: 0
Runbook Diff Exit Code: 0

CONCLUSION: Runtime constitution integration successful

=== SUMMARY & CONCLUSION ===
Branch: feature/runtime-constitution-integration
Snapshot Path: /tmp/constitution.501.62322.md
Snapshot Bytes: 36
Snapshot SHA-256: 307227ea52e21499fc43f126760c80b130ed0e31f797a995d2ddf0f29c1d3c51
Make Exit Code: 0
Runbook Diff Exit Code: 0

CONCLUSION: Runtime constitution integration successful
